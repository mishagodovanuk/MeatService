# bot.py
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, InputFile,
    ForceReply, BufferedInputFile
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from database import (
    get_all_categories, get_sausages_by_category, get_sausage_by_id,
    add_to_cart, get_cart, clear_cart, place_order, get_order_history
)
from utils import format_sausage_text, get_image_path
from config import BOT_TOKEN

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

pending_orders = {}  # user_id -> True
pending_cart_qty = {}  # user_id -> sausage_id

def build_catalog_keyboard():
    kb = InlineKeyboardBuilder()
    for cat_id, cat_name in get_all_categories():
        kb.button(text=cat_name, callback_data=f"cat_{cat_id}")
    kb.adjust(1)
    return kb.as_markup()


@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=build_catalog_keyboard())


@dp.message(Command("menu", "catalog"))
async def menu_handler(message: types.Message):
    await message.answer("üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü—ñ—ó:", reply_markup=build_catalog_keyboard())


@dp.message(Command("about"))
async def about_handler(message: types.Message):
    await message.answer(
        "<b>‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∏—Ä–æ–±–Ω–∏–∫–∞</b>\n\n"
        "üè≠ <b>–ù–∞–∑–≤–∞:</b> –¢–û–í ¬´–ö–æ–≤–±–∞—Å–Ω—è –†—ñ–≤–Ω–µ¬ª\n"
        "üìç <b>–ê–¥—Ä–µ—Å–∞:</b> –º. –†—ñ–≤–Ω–µ, –≤—É–ª. –ú º—è—Å–Ω–∞ 12\n"
        "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +38 (067) 000-00-00\n"
        "üåê <b>Instagram:</b> @kovbasnia\n\n"
        "üßë‚Äçüç≥ –ú–∏ –≤–∏–≥–æ—Ç–æ–≤–ª—è—î–º–æ —è–∫—ñ—Å–Ω—ñ –∫–æ–≤–±–∞—Å–Ω—ñ –≤–∏—Ä–æ–±–∏ –∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –º º—è—Å–∞. "
        "–ü—Ä–∞—Ü—é—î–º–æ –Ω–∞ —Ä–∏–Ω–∫—É –ø–æ–Ω–∞–¥ 10 —Ä–æ–∫—ñ–≤ —ñ –ø–æ—Å—Ç—ñ–π–Ω–æ —Ä–æ–∑—à–∏—Ä—é—î–º–æ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç."
    )


@dp.message(Command("cart"))
async def cart_handler(message: types.Message):
    user_id = message.from_user.id
    cart_items = get_cart(user_id)

    if not cart_items:
        await message.answer("üß∫ –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    text = "üß∫ <b>–í–∞—à –∫–æ—à–∏–∫:</b>"
    total = 0
    for item in cart_items:
        sausage = get_sausage_by_id(item[0])
        if not sausage:
            continue
        price = sausage[7]
        qty = item[3]
        text += f"\n<b>{sausage[1]}</b> ‚Äî {qty} —à—Ç √ó {price} –≥—Ä–Ω"
        total += price * qty

    text += f"\n\n<b>–†–∞–∑–æ–º:</b> {total:.2f} –≥—Ä–Ω"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùå –û—á–∏—Å—Ç–∏—Ç–∏", callback_data="clear_cart"),
            InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="proceed_order")
        ]
    ])

    await message.answer(text, reply_markup=kb)


@dp.callback_query(lambda q: q.data == "clear_cart")
async def clear_cart_cb(query: types.CallbackQuery):
    clear_cart(query.from_user.id)
    await query.message.answer("üóë –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.")


@dp.callback_query(lambda q: q.data == "proceed_order")
async def proceed_order_cb(query: types.CallbackQuery):
    pending_orders[query.from_user.id] = True
    await query.message.answer(
        "üì≤ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ (—Ç–µ–ª–µ—Ñ–æ–Ω, –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ):",
        reply_markup=ForceReply()
    )


@dp.message(Command("orderlist"))
async def order_history_handler(message: types.Message):
    orders = get_order_history(message.from_user.id)

    if not orders:
        await message.answer("üìã –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—è.")
        return

    text = "<b>üìã –í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n"
    for name, price, created_at in orders:
        text += f"\nüßæ <b>{name}</b> ‚Äî {price} –≥—Ä–Ω\nüóì {created_at}"

    await message.answer(text)


@dp.callback_query(lambda q: q.data.startswith("cat_"))
async def category_callback(query: types.CallbackQuery):
    cat_id = int(query.data.split("_")[1])
    sausages = get_sausages_by_category(cat_id)
    kb = InlineKeyboardBuilder()
    for s in sausages:
        kb.button(text=f"{s[1][:30]} ‚Äî {s[7]} –≥—Ä–Ω", callback_data=f"s_{s[0]}")
    kb.adjust(1)
    await query.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:", reply_markup=kb.as_markup())


@dp.callback_query(lambda q: q.data.startswith("s_"))
async def sausage_callback(query: types.CallbackQuery):
    sausage_id = int(query.data.split("_")[1])
    s = get_sausage_by_id(sausage_id)
    sausage = {
        "name": s[1],
        "grade": s[3],
        "packaging": s[4],
        "casing": s[5],
        "shelf_life": s[6],
        "price": s[7],
        "image": s[8],
    }
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞", callback_data=f"add_{s[0]}")]
    ])
    try:
        with open(get_image_path(s[8]), "rb") as f:
            photo = BufferedInputFile(f.read(), filename=s[8])
        await query.message.answer_photo(photo=photo, caption=format_sausage_text(sausage), reply_markup=kb)
    except Exception:
        await query.message.answer(format_sausage_text(sausage), reply_markup=kb)


@dp.callback_query(lambda q: q.data.startswith("add_"))
async def add_to_cart_callback(query: types.CallbackQuery):
    sausage_id = int(query.data.split("_")[1])
    pending_cart_qty[query.from_user.id] = sausage_id
    await query.message.answer("üì• –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å:", reply_markup=ForceReply())


@dp.message(F.reply_to_message)
async def reply_handler(message: types.Message):
    user_id = message.from_user.id

    if user_id in pending_cart_qty:
        try:
            qty = int(message.text.strip())
            if qty <= 0:
                raise ValueError
        except ValueError:
            await message.reply("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2)")
            return

        sausage_id = pending_cart_qty.pop(user_id)
        add_to_cart(user_id, sausage_id, qty)
        await message.reply("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ /cart")

    elif pending_orders.pop(user_id, None):
        phone = message.text.strip()
        items = get_cart(user_id)
        if not items:
            await message.reply("‚ùå –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º.")
            return
        for item in items:
            place_order(user_id, item[0], item[3], phone)
        clear_cart(user_id)
        await message.reply("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ. –ú–∏ –∑ –≤–∞–º–∏ –∑–≤ º—è–∂–µ–º–æ—Å—å! üìû")


if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
