# bot.py
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, InputFile,
    ForceReply, BufferedInputFile
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from database import get_all_categories, get_sausages_by_category, get_sausage_by_id
from utils import format_sausage_text, get_image_path
from config import BOT_TOKEN

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

user_orders = {}  # user_id -> sausage_id

def build_catalog_keyboard():
    kb = InlineKeyboardBuilder()
    for cat_id, cat_name in get_all_categories():
        kb.button(text=cat_name, callback_data=f"cat_{cat_id}")
    kb.adjust(1)
    return kb.as_markup()

@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=build_catalog_keyboard())

@dp.message(Command("menu", "catalog"))
async def menu_handler(message: types.Message):
    await message.answer("üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü—ñ—ó:", reply_markup=build_catalog_keyboard())

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    await message.answer(
        "<b>‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∏—Ä–æ–±–Ω–∏–∫–∞</b>\n\n"
        "üè≠ <b>–ù–∞–∑–≤–∞:</b> –¢–û–í ¬´–ö–æ–≤–±–∞—Å–Ω—è –†—ñ–≤–Ω–µ¬ª\n"
        "üìç <b>–ê–¥—Ä–µ—Å–∞:</b> –º. –†—ñ–≤–Ω–µ, –≤—É–ª. –ú º—è—Å–Ω–∞ 12\n"
        "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +38 (067) 000-00-00\n"
        "üåê <b>Instagram:</b> @kovbasnia\n\n"
        "üßë‚Äçüç≥ –ú–∏ –≤–∏–≥–æ—Ç–æ–≤–ª—è—î–º–æ —è–∫—ñ—Å–Ω—ñ –∫–æ–≤–±–∞—Å–Ω—ñ –≤–∏—Ä–æ–±–∏ –∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –º º—è—Å–∞. "
        "–ü—Ä–∞—Ü—é—î–º–æ –Ω–∞ —Ä–∏–Ω–∫—É –ø–æ–Ω–∞–¥ 10 —Ä–æ–∫—ñ–≤ —ñ –ø–æ—Å—Ç—ñ–π–Ω–æ —Ä–æ–∑—à–∏—Ä—é—î–º–æ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç."
    )

@dp.callback_query(lambda q: q.data.startswith("cat_"))
async def category_callback(query: types.CallbackQuery):
    cat_id = int(query.data.split("_")[1])
    sausages = get_sausages_by_category(cat_id)
    kb = InlineKeyboardBuilder()
    for s in sausages:
        kb.button(text=f"{s[1][:30]} ‚Äî {s[7]} –≥—Ä–Ω", callback_data=f"s_{s[0]}")
    kb.adjust(1)
    await query.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:", reply_markup=kb.as_markup())

@dp.callback_query(lambda q: q.data.startswith("s_"))
async def sausage_callback(query: types.CallbackQuery):
    sausage_id = int(query.data.split("_")[1])
    s = get_sausage_by_id(sausage_id)
    sausage = {
        "name": s[1],
        "grade": s[3],
        "packaging": s[4],
        "casing": s[5],
        "shelf_life": s[6],
        "price": s[7],
        "image": s[8],
    }
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–º–æ–≤–∏—Ç–∏", callback_data=f"order_{s[0]}")]
    ])
    try:
        with open(get_image_path(s[8]), "rb") as f:
            photo = BufferedInputFile(f.read(), filename=s[8])
        await query.message.answer_photo(photo=photo, caption=format_sausage_text(sausage), reply_markup=kb)
    except Exception:
        await query.message.answer(format_sausage_text(sausage), reply_markup=kb)

@dp.callback_query(lambda q: q.data.startswith("order_"))
async def order_callback(query: types.CallbackQuery):
    sausage_id = int(query.data.split("_")[1])
    user_orders[query.from_user.id] = sausage_id
    await query.message.answer(
        "üì≤ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ —ñ–º º—è –π –∫–æ–Ω—Ç–∞–∫—Ç:",
        reply_markup=ForceReply()
    )

@dp.message(F.reply_to_message)
async def contact_handler(message: types.Message):
    uid = message.from_user.id
    if uid not in user_orders:
        return
    sausage_id = user_orders.pop(uid)
    sausage = get_sausage_by_id(sausage_id)
    phone = message.text.strip()
    await message.reply(
        f"‚úÖ –î—è–∫—É—î–º–æ! –ú–∏ –∑ –≤–∞–º–∏ –∑–≤ º—è–∂–µ–º–æ—Å—å —â–æ–¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
        f"<b>{sausage[1]}</b> ‚Äî {sausage[7]} –≥—Ä–Ω/–∫–≥\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {phone}"
    )

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
